{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introducci\u00f3n","text":"<p>En el presente proyecto tiene la finalidad de analizar un conjunto de datos utilizando el lenguaje de programaci\u00f3n Python. Los datos se recopilan de una base de datos SQLite, se procesan y se utilizan t\u00e9cnicas estad\u00edsticas para ajustarlas a los modelos seg\u00fan lo estudiado en clase.</p>"},{"location":"#codigo-de-python","title":"C\u00f3digo de Python","text":"<p>Ahora respecto al c\u00f3digo de Python, en este se emplean bibliotecas como sqlite3, pandas, matplotlib, y scipy.stats con el prop\u00f3sito  de calcular y hacer graficas de tipo estad\u00edsticos. Para esto se extraen los valores num\u00e9ricos de proyecto.db, del cual se tiene dos variables <code>(variable_1 y variable_2)</code> de la tabla test_data. Adem\u00e1s, en la conexi\u00f3n a la base de datos se utiliza SQL, ya que nos permite acceder a los datos para su posterior manipulaci\u00f3n. Una vez conseguido los valores se almacenan en DataFrame y m\u00e1s adelante se observa parte del c\u00f3digo:</p> <pre><code>Creaci\u00f3n de H conn = sqlite3.connect('proyecto.db')\nquery = \"SELECT variable_1, variable_2 FROM test_data\"\ndata = pd.read_sql_query(query, conn)\nconn.close()\n</code></pre> <p>Para la visualizaci\u00f3n de los datos se efectuaron histogramas para ambas variables y con base a eso, se le agregan l\u00edneas de mejor ajuste. Es importante mencionar que los histogramas son de bastante ayuda debido a que permiten observar de una mejor manera la forma de la distribuci\u00f3n de los cifras, as\u00ed se identifican las caracter\u00edsticas como la simetr\u00eda, la dispersi\u00f3n y posibles sesgos. El siguiente c\u00f3digo ilustra c\u00f3mo se generaron los histogramas:</p> <pre><code>plt.hist(data['variable_1'], bins=20, color='blue', alpha=0.7)\nplt.hist(data['variable_2'], bins=20, color='green', alpha=0.7)\n</code></pre> <p>En el caso del ajuste de distribuci\u00f3n, se aprecia como en la l\u00ednea de c\u00f3digo faculta evaluar si los datos siguen patrones espec\u00edficos:</p> <pre><code>mu_1, std_1 = norm.fit(data['variable_1'])\nloc_2, scale_2 = expon.fit(data['variable_2'], floc=0)\n</code></pre> <p>Luego, est\u00e1 el c\u00e1lculo de los momentos estad\u00edsticos para las dos variables. Para alcanzar la media, varianza, desviaci\u00f3n est\u00e1ndar, asimetr\u00eda (skewness) y curtosis. Este contenido genera una descripci\u00f3n cuantitativa de las distribuciones y de igual forma se muestra c\u00f3mo se realiza en el c\u00f3digo:</p> <pre><code>mea_1 = data['variable_1'].mean()\nvar_1 = data['variable_1'].var()\nskew_1 = skew(data['variable_1'])\nkurt_1 = kurtosis(data['variable_1'])\n</code></pre>"},{"location":"codigos/","title":"L\u00edneas de c\u00f3digo importantes","text":"<p>El primer c\u00f3digo <code>tasks.py</code> posee una herramienta llamada Celery, la cual se encarga de ejecutar las tareas en segundo plano. Para esta ocaci\u00f3n, se llega a descargar los datos de una API, se prosesa y se guardan en una tabla de base de datos llamada <code>TestData</code>.</p> <pre><code>\nfrom celery import Celery\nfrom celery.schedules import timedelta\nfrom datetime import datetime\nimport requests\nimport json\nimport configparser\nimport logging\n\nfrom models import session, TestData\n\n\n# Crear \"app\" de Celery\napp = Celery(\"tasks\", broker=\"redis://localhost\")\n\n\n# Configurar las tareas de Celery\n@app.task\ndef test_task(url, group):\n    \"\"\"Descarga datos de una API y los almacena\n    en la tabla de ejemplo de una base de datos.\n\n    Parameters\n    ----------\n    url : str\n        URL de la API.\n    group : str\n        N\u00famero de grupo del proyecto.\n\n    Returns\n    -------\n    str\n        Mensaje de \u00e9xito.\n    \"\"\"\n    params = {\"grupo\": int(group)}\n    response = requests.get(url, params=params)\n\n    if response.status_code == 200:\n        data = json.loads(response.text)\n\n        timestamp = datetime.strptime(data[\"timestamp\"], \"%Y-%m-%d %H:%M:%S\")\n        sample_size = data[\"sample_size\"]\n        for sample in range(sample_size):\n            record = TestData(\n                group=group,\n                timestamp=timestamp,\n                variable_1=data[\"variable_1\"][sample],\n                variable_2=data[\"variable_2\"][sample],\n\n            )\n            session.add(record)\n            session.commit()\n        return \"\u00a1Hola mundo!\"\n    else:\n        logging.error(f\"Error {response.status_code}: {response.text}\")\n        return \"Algo fall\u00f3 en la solicitud de datos.\"\n\n\n@app.task\ndef schedule_task():\n    return \"\u00a1Hola mundo cada 60 minutos!\"\n\n\n# ----------\n# Configurar aqu\u00ed las tareas de Celery para el procesamiento de los datos\n# ----------\n\n# Datos de configuraci\u00f3n\nconfig = configparser.ConfigParser()\nconfig.read(\"proyecto.cfg\")\nurl = config[\"api\"][\"url\"]\ngroup = config[\"api\"][\"group\"]\nperiod = int(config[\"scheduler\"][\"period\"])\n\n# Configurar el planificador de tareas de Celery\napp.conf.beat_schedule = {\n    \"test-schedule\": {\n        \"task\": \"tasks.test_task\",\n        \"args\": (url, group),\n        \"schedule\": timedelta(seconds=period),\n    },\n    \"test-schedule-task\": {\n        \"task\": \"tasks.schedule_task\",\n        \"schedule\": timedelta(minutes=60),\n    },\n}\n</code></pre> <p>De igual manera lo puede descargar mediante este link: - Descargar c\u00f3digo Python</p> <p>Ahora con el segundo c\u00f3digo, el cual se ocupa se manejar la base de datos y puntualiza la forma de alamacenimiento de los datos en la tabla <code>TestData</code>. Adem\u00e1s, de conectar la base de datos, esta crea una tabla si fuera el caso que no existiera. Por lo tanto, prepara el entorno para guardar informaci\u00f3n.</p> <pre><code>from sqlalchemy import create_engine, Column, Integer, String, Float, DateTime\nfrom sqlalchemy.orm import DeclarativeBase, sessionmaker\nimport configparser\n\n\n# Crear la clase base de la tabla\nclass Base(DeclarativeBase):\n    pass\n\n\n# Datos de configuraci\u00f3n\nconfig = configparser.ConfigParser()\nconfig.read(\"proyecto.cfg\")\ndb = config[\"db\"][\"db\"]\nif db == \"sqlite\":\n    system = config[\"db\"][\"sqlite\"]\nelif db == \"postgresql\":\n    system = config[\"db\"][\"postgresql\"]\n\n\n# Definir los modelos\nclass TestData(Base):\n    __tablename__ = \"test_data\"\n\n    id = Column(Integer, primary_key=True)\n    group = Column(String)\n    timestamp = Column(DateTime)\n    variable_1 = Column(Integer)\n    variable_2 = Column(Float)\n\n\n# Crear la conexi\u00f3n a la base de datos SQLite3 o PostgreSQL\nengine = create_engine(system)\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# Crear la(s) tabla(s) en la base de datos\nBase.metadata.create_all(engine)\n</code></pre> <p>De igual manera lo puede descargar mediante este link: - Descargar c\u00f3digo Python</p> <p>En el caso de la base de datos, se pueden descaragar en el siguiente link: - Descargar base de datos</p>"},{"location":"resulatados/","title":"Resultados obtenidos en el avance","text":"<p>En esta primera parte de los resultados, se va observar el comportamiento de los datos de las <code>variable_1</code> y <code>variable_2</code> en histogramas. </p> <p></p> <p>Ahora utlizando la misma imagen pero aplicandoles los modelos de probabilidad. En donde se puede apreciar como como la <code>variable_1</code> tiene un comportamiento normal o m\u00e1s conocido como campana de Gauss, por otra parte la <code>variable_2</code> posee un comportamiento exponecial.</p> <p></p> <p>Finalmente, se aprecia los momentos de los modelos:</p> <p>Momentos de <code>variable_1</code>:</p> <ul> <li>Promedio: 0.0030754730077360497</li> <li>Varianza: 3.2927034329900775</li> <li>Desviaci\u00f3n est\u00e1ndar: 1.8145807871213884</li> <li>Inclinaci\u00f3n: 0.010291901241070064</li> <li>Kurtosis: 1.1335262206667638</li> </ul> <p></p> <p>Momentos de <code>variable_2</code>:</p> <ul> <li>Promedio: 4.292701198685403</li> <li>Varianza: 33.974125486393426</li> <li>Desviaci\u00f3n est\u00e1ndar: 5.828732751327121</li> <li>Inclinaci\u00f3n: 4.89787631161442</li> <li>Kurtosis: 44.381358162707954</li> </ul>"}]}